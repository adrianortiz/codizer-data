// Mixins para media queries
// El parámetro es el nombre del breakpoint

@mixin hasta($size){
	@if map-has-key($breakpoints,$size){
    // Si el parámetro es el nombre de un tamaño, se extrae desde el map
		@media screen and (max-width: map-get($breakpoints,$size) - 1){
			@content;
		}
	} @else {
    // Si el parámetro no existe en el map, se toma su valor para construir la media query
		 @media screen and (max-width: $size){
			@content;
		}
	}
}

@mixin desde($size){
	@if map-has-key($breakpoints,$size){
    // Si el parámetro es el nombre de un tamaño, se extrae desde el map
		@media screen and (min-width: map-get($breakpoints,$size)){
			@content;
		}
	} @else {
    // Si el parámetro no existe en el map, se toma su valor para construir la media query
		 @media screen and (min-width: $size){
			@content;
		}
	}
}

@mixin desde-hasta($desde,$hasta){
	@if map-has-key($breakpoints,$desde) and map-has-key($breakpoints,$hasta){
		@media screen and (min-width: map-get($breakpoints,$desde)) and (max-width: map-get($breakpoints,$hasta) - 1){
			@content;
		}
	} @else if map-has-key($breakpoints,$desde) and not map-has-key($breakpoints,$hasta){
		@media screen and (min-width: map-get($breakpoints,$desde)) and (max-width: $hasta) {
			@content;
		}
	} @else if not map-has-key($breakpoints,$desde) and map-has-key($breakpoints,$hasta) {
		@media screen and (min-width: $desde) and (max-width: map-get($breakpoints,$hasta) - 1){
			@content;
		}
	} @else {
		@media screen and (min-width: $desde) and (max-width: $hasta){
			@content;
		}
	}
}

// Mixins para cuadriculas
// Se aplica al contendor de la cuadricula. 
// Los parámetros son el selector de cada item y el número de columnas
// El tercer parámetro (opcional) es la separacion entre columnas (en porcentaje)
@mixin cuadricula($items,$columnas,$separacion:2%){
	// por si el contenedor es un ul
	@if $items == li {
		margin     : 0;
		padding    : 0;
		list-style : none; 

		li {
			margin-left: 0;
		}
	}
    
    // Limpiar los floats para el contenedor
	&:before, &:after {
		clear   : both;
		content : " ";
		display : table;
		width   : 100%;
	}

	& > #{$items}, & > .#{$items}{
		float          : left;
		width          : (100% - $separacion * ($columnas - 1)) / $columnas;
		margin-right   : $separacion;
		margin-bottom  : $separacion;
        
        //Limpiar el float para el último elemento de cada fila
		&:nth-child(#{$columnas}n){
			margin-right : 0;
			clear        : right;
		}
    
        //Limpiar el float para el primer elemento de cada fila
		&:nth-child(#{$columnas}n+1){
			clear        : left;
		}
	}
}

// Mixin para controlar el padding
// El parámetro es por cuanto se va a multiplicar el padding base.
@mixin padding($numero){
	padding-left: ($caja--separacion / 2) * $numero;
	padding-right: ($caja--separacion / 2) * $numero;
}

// Mixin para proporcion de aspecto, se le pasan tres parámetros
// Horizontal, Vertical y Ancho. Este ultimo es opcional, si no 
// se pasa, se tomará el 100% de ancho por defecto.
@mixin proporcion($h,$v,$width:100%){
	width          : $width;
	height         : 0;
	overflow       : hidden;
	padding-bottom : $width * ($v/$h);
}

@mixin ed-boton(
    $font-size: 1em, // Tamaño de fuente
    $color: initial,  //Color del texto
    $background: #eee, // Color de fondo
    $hover: #ddd,  // Fondo para el botón en hover
	$line-height: 2.5em, // Altura del botón
    $border-radius: 0,  // Border radius
    $border: 1px solid rgba(#000,.2),  // Estilo del borde
    $padding: 1em  // Padding izquierdo y derecho
	){
	color         : $color;
	display       : inline-block;
	line-height   : $line-height;
	background    : $background;
	padding       : 0 $padding;
	border        : $border;
	border-radius : $border-radius;
	font-size     : $font-size;
	cursor        : pointer;
	margin        : 1em;
	text-decoration: none;
    &:hover{
		background : $hover;
		text-decoration: none !important;
	}
}

@mixin abcenter($item){
	position: relative;
	#{$item},.#{$item} {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translateY(-50%) translateX(-50%);
		-webkit-transform: translateY(-50%) translateX(-50%);
		-ms-transform: translateY(-50%) translateX(-50%);
		margin: auto !important;
	}
}

@mixin vcenter($item){
	position: relative;
	#{$item},.#{$item} {
		position: absolute;
		top: 50%;
		transform: translateY(-50%);
		-webkit-transform: translateY(-50%);
		-ms-transform: translateY(-50%);
		margin: auto !important;
	}
}

@mixin limpiar {
	&:before,&:after{
		content: "";
		width: 100%;
		display: table;
		clear: both;
	}
}

@mixin derecha($width:auto,$margin-left:1em){
	float: right;
	width: $width;
	margin-left: $margin-left;
}

@mixin izquierda($width:auto,$margin-right:1em){
	float: left;
	width: $width;
	margin-right: $margin-right;
}

@mixin centro($width:auto){
	display: table;
	width: $width;
	margin-left: auto;
	margin-right: auto;
}